[{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introducing bgms","text":"example demonstrates use bgms Bayesian analysis binary ordinal data using Markov Random Field (MRF) model. learn MRF model, check Marsman et al. (2023), learn Bayesian analysis network models, check Huth et al. (2023). paper bgms software coming soon. ’ll examine real data PTSD symptoms 362 Chinese adults survived Wenchuan earthquake tragically lost child (McNally et al., 2015). data comes 17-question survey participants rated much symptom bothered past month scale “” “extremely.”","code":"library(bgms)"},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"example-bayesian-model-averaging","dir":"Articles","previous_headings":"","what":"Example – Bayesian Model Averaging","title":"Introducing bgms","text":"comprehensive Bayesian analysis data considers network structure corresponding parameters. numerous structures underlie network, employ simulation-based methods investigate posterior distribution network structures parameters (Marsman et al., 2023). bgm function performs task, iteratively simulating values posterior distribution network structures parameters.","code":""},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"usage","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging","what":"Usage","title":"Introducing bgms","text":"","code":"bgm(x,     variable_type = \"ordinal\",     reference_category,     iter = 1e4,     burnin = 1e3,     interaction_scale = 2.5,     threshold_alpha = 0.5,     threshold_beta = 0.5,     edge_selection = TRUE,     edge_prior = c(\"Bernoulli\", \"Beta-Bernoulli\"),     inclusion_probability = 0.5,     beta_bernoulli_alpha = 1,     beta_bernoulli_beta = 1,     na.action = c(\"listwise\", \"impute\"),     save = FALSE,     display_progress = TRUE )"},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"arguments","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging","what":"Arguments","title":"Introducing bgms","text":"x: data frame matrix n rows p columns, containing binary ordinal variables n independent observations p variables network. Regular binary ordinal variables recoded non-negative integers (0, 1, …, m) already done. Unobserved categories collapsed categories recoding (.e., category 1 unobserved, data recoded (0, 2) (0, 1)). Blume-Capel ordinal variables also coded non-negative integers already done. However, since ``distance’’ reference category plays important role model, unobserved categories collapsed recoding. variable_type: kind variables x? Can single character string specifying variable type p variables vector character strings length p specifying type variable x separately. Currently, bgm supports “ordinal” “blume-capel”. Binary variables automatically treated “ordinal”. Defaults variable_type = \"ordinal\". reference_category: reference category Blume-Capel model. integer within range integer scores observed “blume-capel” variable. Can single number specifying reference category Blume-Capel variables , vector length p -th element contains reference category variable Blume-Capel, bgm ignores elements variable types. value reference category also recoded bgm recodes corresponding observations. required least one variable type “blume-capel”. iter: many iterations Gibbs sampler run? default 1e4 illustrative purposes. stable estimates, recommended run Gibbs sampler least 1e5 iterations. burnin: number iterations Gibbs sampler output saved. Since may take time Gibbs sampler converge posterior distribution, recommended set number low. interaction_scale: scale Cauchy distribution used prior pairwise interaction parameters. Defaults 2.5. threshold_alpha, threshold_beta: shape parameters beta-prime prior density threshold parameters. Must positive values. two values equal, prior density symmetric zero. threshold_beta greater threshold_alpha, distribution skewed left, threshold_beta less threshold_alpha, skewed right. Smaller values tend lead diffuse prior distributions. edge_selection: function perform Bayesian edge selection edges MRF addition estimating parameters (edge_selection = TRUE), just estimate parameters (edge_selection = FALSE)? default edge_selection = TRUE. edge_prior: prior distribution edges structure network. Two prior distributions currently implemented: Bernoulli model edge_prior = \"Bernoulli\" assumes probability edge two variables included equal inclusion_probability independent edges variables. inclusion_probability = 0.5, implies network structure receives prior weight. Beta-Bernoulli model edge_prior = \"Beta-Bernoulli\" assumes beta prior unknown inclusion probability shape parameters beta_bernoulli_alpha beta_bernoulli_beta. beta_bernoulli_alpha = 1 beta_bernoulli_beta = 1, means networks complexity (number edges) receive prior weight. Defaults `edge_prior = “Bernoulli”’. inclusion_probability: prior edge inclusion probability Bernoulli model. Can single probability, matrix p rows p columns specifying inclusion probability edge pair. Defaults inclusion_probability = 0.5. beta_bernoulli_alpha, beta_bernoulli_beta: two shape parameters Beta prior density Bernoulli inclusion probability. Must positive numbers. Defaults beta_bernoulli_alpha = 1 beta_bernoulli_beta = 1. na.action: want function handle missing data? na.action = \"listwise\", listwise deletion used. na.action = \"impute\", missing data imputed iteratively MCMC procedure. Since imputation missing data can negative impact convergence speed MCMC procedure, recommended run MCMC iterations. Also, since numerical routines search mode posterior imputation option, bgm function automatically switch interaction_prior = \"Cauchy\" adaptive = TRUE. save: function collect return samples Gibbs sampler (save = TRUE)? return (model-averaged) posterior means (save = FALSE)? Defaults FALSE. display_progress: function show progress bar (display_progress = TRUE)? (display_progress = FALSE)? Defaults TRUE.","code":""},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"output","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging","what":"Output","title":"Introducing bgms","text":"save = FALSE (default), result list containing following matrices: gamma: matrix p rows p columns, containing posterior inclusion probabilities individual edges. interactions: matrix p rows p columns, containing model-averaged posterior means pairwise associations. thresholds: matrix p rows max(m) columns, containing model-averaged category thresholds. save = TRUE, result list containing: samples.gamma: matrix iter rows p * (p - 1) / 2 columns, containing edge inclusion indicators every iteration Gibbs sampler. samples.interactions: matrix iter rows p * (p - 1) / 2 columns, containing parameter states every iteration Gibbs sampler pairwise associations. samples.thresholds: matrix iter rows sum(m) columns, containing parameter states every iteration Gibbs sampler category thresholds. Column averages matrices provide model-averaged posterior means.","code":""},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"analysis","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging","what":"Analysis","title":"Introducing bgms","text":"save time, ran algorithm using default number iterations, 10,000. However, probably enough fully explore posterior distribution network structures parameters. obtain reliable accurate estimates, recommend increasing number iterations 100,000 . function employs simulation method averages plausible network structures estimate posterior inclusion probability, represents probability network containing edge question generated observed data. Let’s plot relation interaction estimates inclusion probabilities.  see estimated edge weights (interactions) near zero low inclusion probabilities, edge weights far zero high inclusion probabilities. zero inclusion probability corresponds bgm setting edge weight exactly zero.","code":"fit <-  bgm(x = Wenchuan) par(mar = c(6, 5, 1, 1)) plot(x = fit$interactions[lower.tri(fit$interactions)],       y = fit$gamma[lower.tri(fit$gamma)], ylim = c(0, 1),       xlab = \"\", ylab = \"\", axes = FALSE, pch = 21, bg = \"gray\", cex = 1.3) abline(h = 0, lty = 2, col = \"gray\") abline(h = 1, lty = 2, col = \"gray\") abline(h = .5, lty = 2, col = \"gray\") mtext(\"Posterior mean edge weight\", side = 1, line = 3, cex = 1.7) mtext(\"Posterior inclusion probability\", side = 2, line = 3, cex = 1.7) axis(1) axis(2, las = 1)"},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"median-probability-network","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging > Analysis","what":"Median probability network","title":"Introducing bgms","text":"Using posterior inclusion probabilities, can also identify median probability network. network, include edges posterior inclusion probability greater 0.5. can create median probability model follows.","code":"library(qgraph) #For plotting the estimated network    posterior.inclusion <- fit$gamma[lower.tri(fit$gamma)] tmp <- fit$interactions[lower.tri(fit$interactions)] tmp[posterior.inclusion < 0.5] = 0    median.prob.model <- matrix(0, nrow = ncol(Wenchuan), ncol = ncol(Wenchuan)) median.prob.model[lower.tri(median.prob.model)] <- tmp median.prob.model <- median.prob.model + t(median.prob.model)    rownames(median.prob.model) <- colnames(Wenchuan) colnames(median.prob.model) <- colnames(Wenchuan)    qgraph(median.prob.model,         theme = \"TeamFortress\",         maximum = .5,        fade = FALSE,        color = c(\"#f0ae0e\"), vsize = 10, repulsion = .9,         label.cex = 1.1, label.scale = \"FALSE\",         labels = colnames(Wenchuan))"},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"inclusion-bayes-factors","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging > Analysis","what":"Inclusion Bayes factors","title":"Introducing bgms","text":"One benefits using fully Bayesian approach allows us calculate inclusion Bayes factor Huth et al. (2023). inclusion Bayes factor represents relative evidence including excluding connection pair nodes network. inclusion Bayes factor 10 suggests observed data ten times likely come network includes relationship. Conversely, inclusion Bayes factor 1/10 implies observed data ten times likely come network excludes relationship. ’s important note inclusion Bayes factors can also reveal limited support either hypothesis. current version analysis, assumed prior inclusion probabilities equal 0.5. Users can change either adapting inclusion_probability choose edge_prior = \"Beta-Bernoulli\" pick different values beta_bernoulli_alpha beta_bernoulli_beta. Since inclusion probability 0.5, prior odds inclusion vs exclusion one. calculate inclusion Bayes factors, can thus simply convert estimated posterior inclusion probabilities. easier visualization, common use natural logarithm Bayes factor plotting. Lets plot relation estimated edge weights inclusion Bayes factor.  example, use cut-value 10 inclusion Bayes factors. Values greater 10 suggest evidence edge inclusion, values less 1/10 indicate evidence edge exclusion, values 1/10 10 considered represent weak evidence.","code":"# Calculate the inclusion BFs prior.odds = 1 posterior.inclusion = fit$gamma[lower.tri(fit$gamma)] posterior.odds = posterior.inclusion / (1 - posterior.inclusion) log.bayesfactor = log(posterior.odds / prior.odds) #The next line is used to truncate the extreme values of the Bayes factor in the plot log.bayesfactor[log.bayesfactor > 5] = 5 par(mar = c(5, 5, 1, 1) + 0.1) plot(fit$interactions[lower.tri(fit$interactions)], log.bayesfactor, pch = 21, bg = \"#bfbfbf\",      cex = 1.3, axes = FALSE, xlab = \"\", ylab = \"\", ylim = c(-5, 5.5),     xlim = c(-0.5, 1.5)) axis(1) axis(2, las = 1) abline(h = log(1/10), lwd = 2, col = \"#bfbfbf\") abline(h = log(10), lwd = 2, col = \"#bfbfbf\")  text(x = 1, y = log(1 / 10), labels = \"Evidence for exclusion\", pos = 1,     cex = 1.7) text(x = 1, y = log(10), labels = \"Evidence for inclusion\", pos = 3, cex = 1.7) text(x = 1, y = 0, labels = \"Weak evidence\", cex = 1.7) mtext(\"Log-inclusion Bayes factor\", side = 2, line = 3, cex = 1.5, las = 0) mtext(\"Posterior mean edge weights \", side = 1, line = 3.7, cex = 1.5, las = 0)"},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"analysis-with-raw-output","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging","what":"Analysis with raw output","title":"Introducing bgms","text":"purposes, default output bgm sufficient, providing us posterior means edge indicators parameters. However, cases, may want use raw samples joint posterior distribution. estimate posterior distribution specific parameter, assess many network structures fit given data, create Bayes factors hypotheses involving multiple edges. can obtain raw samples setting save = TRUE.","code":"fit <-  bgm(x = Wenchuan, save = TRUE)"},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"posterior-density-of-edge-weight","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging > Analysis with raw output","what":"Posterior density of edge weight","title":"Introducing bgms","text":"can employ following code use posterior samples plotting posterior density single edge:  posterior distribution edge weight averaged across structures, can lead greater dispersion compared estimating specific model. takes account uncertainty network structures parameter estimates associated structures. Note estimate smooth. used 10,000 samples estimate posterior distribution.","code":"den = density(fit$interactions[,1], bw = \"SJ\") i = which.min(abs(den$x - mean(fit$interactions[,1])))[1] x = den$x[i] f = den$y[i] par(cex.main = 1.5, mar = c(5, 6, 1, 1) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5, font.lab = 2, cex.axis = 1.3, bty = \"n\", las = 1) plot(den, axes = FALSE, xlab=\"\", ylab=\"\", main = \"\", frame.plot = FALSE) axis(1) axis(2) par(las = 0) mtext(text = \"Edge weight\", side = 1, line = 2.5, cex = 1.5) mtext(text = \"Posterior density\", side = 2, line = 2.5, cex = 1.5) # Add a point to indicate the posterior mean points(x, f, pch = 21, bg = \"grey\", cex = 1.7)"},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"the-posterior-distribution-of-structures","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging","what":"The posterior distribution of structures","title":"Introducing bgms","text":"can also use raw samples count number unique structures bgm encountered 10,000 iterations. clearly many different network structures fit data. Let’s estimate posterior probabilities. plausible model accounts less 1 percent posterior probability. conclusion, significant uncertainty network structure generated data. analysis Marsman et al. (2023), demonstrated even uncertainty network structure generated data, inclusion Bayes factors highly robust. can help identify substructures network strong confidence. However, perform analyses, need run bgm many iterations. analysis, Marsman et al. (2023) used 1,000,000 iterations. details, interested readers can refer analysis script .","code":"G = 2 * fit$gamma - 1 S = unique(G) nrow(S) #> [1] 8996 Ps = vector(length = nrow(S)) for(r in 1:nrow(S)) {   s = S[r, ]   tmp = G %*% s   Ps[r] = sum(tmp == ncol(G)) } Ps = Ps / nrow(G) * 100 max(Ps) #> [1] 0.14"},{"path":[]},{"path":"https://maartenMarsman.github.io/bgms/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maarten Marsman. Author, maintainer. Karoline Huth. Contributor. Nikola Sekulovski. Contributor. Don van den Bergh. Contributor.","code":""},{"path":"https://maartenMarsman.github.io/bgms/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marsman, M., Huth, K., Sekulovski, N., & Bergh, D. van den. (2023). Bgms: Bayesian variable selection networks binary /ordinal variables. https://CRAN.R-project.org/package=bgms","code":"@Manual{,   title = {bgms: Bayesian Variable Selection for Networks of Binary and/or Ordinal Variables},   author = {Maarten Marsman and Karoline Huth and Nikola Sekulovski and Don {van den Bergh}},   year = {2023},   url = {https://CRAN.R-project.org/package=bgms},   note = {R package version 0.1.3.2}, }"},{"path":"https://maartenMarsman.github.io/bgms/index.html","id":"bgms-bayesian-analysis-of-graphical-models","dir":"","previous_headings":"","what":"Bayesian Analysis of Networks of Binary and/or Ordinal Variables","title":"Bayesian Analysis of Networks of Binary and/or Ordinal Variables","text":"R package bgms provides tools Bayesian analysis graphical models describing networks variables. package uses Markov chain Monte Carlo methods combined pseudolikelihood approach estimate posterior distribution model parameters. Gibbs variable selection (George McCulloch 1993) used model underlying network structure graphical model. imposing discrete spike slab prior pairwise interactions, possible shrink interactions exactly zero. Gibbs sampler embeds Metropolis approach mixtures mutually singular distributions (Gottardo Raftery 2008) account discontinuity zero. goal provide tools Markov Random Field (MRF) models wide range variable types bgms package, currently provides analyzing networks binary /ordinal variables (Marsman Haslbeck 2023).","code":""},{"path":"https://maartenMarsman.github.io/bgms/index.html","id":"why-use-markov-random-fields","dir":"","previous_headings":"","what":"Why use Markov Random Fields?","title":"Bayesian Analysis of Networks of Binary and/or Ordinal Variables","text":"Multivariate analysis using graphical models received much attention recent psychological psychometric literature (Robinaugh et al. 2020; Marsman Rhemtulla 2022; Contreras et al. 2019). graphical models Markov Random Field (MRF) models, whose graph structure reflects conditional associations variables (Kindermann Snell 1980). models, missing edge two variables network implies variables independent, given remaining variables (Lauritzen 2004). words, remaining variables network fully account potential association unconnected variables.","code":""},{"path":"https://maartenMarsman.github.io/bgms/index.html","id":"why-use-a-bayesian-approach-to-analyze-the-mrf","dir":"","previous_headings":"","what":"Why use a Bayesian approach to analyze the MRF?","title":"Bayesian Analysis of Networks of Binary and/or Ordinal Variables","text":"Testing structure MRF requires us determine plausibility opposing hypotheses conditional dependence conditional independence. , plausible observed data come network structure includes edge two variables compared network structure excludes edge? Frequentist approaches limited regard can reject conditional independence hypothesis, support (Wagenmakers et al. 2018; Wagenmakers 2007). leads problem edge excluded, know whether edge absent population lack power reject null hypothesis independence. avoid problem, use Bayesian approach using Bayes factors (Kass Raftery 1995)). inclusion Bayes factor (Huth et al. 2023; Sekulovski et al. 2024) allows us quantify much data support conditional dependence -evidence edge presence- conditional independence -evidence edge absence. also allows us conclude limited support either hypothesis (Dienes 2014)-absence evidence.","code":""},{"path":"https://maartenMarsman.github.io/bgms/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Analysis of Networks of Binary and/or Ordinal Variables","text":"current developmental version can installed ","code":"if (!requireNamespace(\"remotes\")) {    install.packages(\"remotes\")    }    remotes::install_github(\"MaartenMarsman/bgms\")"},{"path":[]},{"path":"https://maartenMarsman.github.io/bgms/reference/Wenchuan.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-traumatic stress disorder symptoms of Wenchuan earthquake survivors — Wenchuan","title":"Post-traumatic stress disorder symptoms of Wenchuan earthquake survivors — Wenchuan","text":"data set containing items measuring symptoms posttraumatic stress disorder (PTSD) McNallyEtAl_2015bgms. Participants 362 Chinese adults survived Wenchuan earthquake lost least one child disaster. PTSD symptoms reported using civilian version Posttraumatic Checklist, consists 17 items, assessing one DSM-IV symptoms PTSD. Participants rated item five-point scale ranging “” “extremely” indicate much symptom bothered past month.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/Wenchuan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-traumatic stress disorder symptoms of Wenchuan earthquake survivors — Wenchuan","text":"","code":"data(\"Wenchuan\")"},{"path":"https://maartenMarsman.github.io/bgms/reference/Wenchuan.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Post-traumatic stress disorder symptoms of Wenchuan earthquake survivors — Wenchuan","text":"matrix 362 rows 17 columns: intrusion Repeated, disturbing memories, thoughts, images   stressful experience past? dreams Repeated, disturbing dreams stressful experience   past? flash Suddenly acting feeling stressful experience   happening (reliving )? upset Feeling upset something reminded stressful   experience past? physior physical reactions (e.g., heart pounding, trouble   breathing, sweating) something reminded stressful experience   past? avoidth Avoiding thinking talking stressful   experience past avoiding feelings related ? avoidact Avoiding activities situations reminded   stressful experience past? amnesia Trouble remembering important parts stressful   experience past? lossint Loss interest activities used enjoy? distant Feeling distant cut people? numb Feeling emotionally numb unable loving   feelings close ? future Feeling future somehow cut short? sleep Trouble falling staying asleep? anger Feeling irritable angry outbursts? concen difficulty concentrating? hyper \"super-alert\" watchful guard? startle Feeling jumpy easily startled?","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/Wenchuan.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Post-traumatic stress disorder symptoms of Wenchuan earthquake survivors — Wenchuan","text":"http://psychosystems.org/wp-content/uploads/2014/10/Wenchuan.csv","code":""},{"path":[]},{"path":"https://maartenMarsman.github.io/bgms/reference/bgm.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","title":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","text":"function bgm explores joint pseudoposterior distribution parameters possibly edge indicators Markov Random Field model mixed binary ordinal variables.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","text":"","code":"bgm(   x,   variable_type = \"ordinal\",   reference_category,   iter = 10000,   burnin = 1000,   interaction_scale = 2.5,   threshold_alpha = 0.5,   threshold_beta = 0.5,   edge_selection = TRUE,   edge_prior = c(\"Bernoulli\", \"Beta-Bernoulli\"),   inclusion_probability = 0.5,   beta_bernoulli_alpha = 1,   beta_bernoulli_beta = 1,   na.action = c(\"listwise\", \"impute\"),   save = FALSE,   display_progress = TRUE )"},{"path":"https://maartenMarsman.github.io/bgms/reference/bgm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","text":"x data frame matrix n rows p columns containing binary ordinal variables n independent observations p variables network. Regular binary ordinal variables recoded non-negative integers (0, 1, ..., m) already done. Unobserved categories collapsed categories recoding (.e., category 1 unobserved, data recoded (0, 2) (0, 1)). Blume-Capel ordinal variables also coded non-negative integers already done. However, since “distance” reference category plays important role model, unobserved categories collapsed recoding. variable_type kind variables x? Can single character string specifying variable type p variables vector character strings length p specifying type variable x separately. Currently, bgm supports “ordinal” “blume-capel”. Binary variables automatically treated “ordinal’’. Defaults variable_type = \"ordinal\". reference_category reference category Blume-Capel model. integer within range integer scores observed “blume-capel” variable. Can single number specifying reference category Blume-Capel variables , vector length p -th element contains reference category variable Blume-Capel, bgm ignores elements variable types. value reference category also recoded bgm recodes corresponding observations. required least one variable type “blume-capel”. iter many iterations Gibbs sampler run? default 1e4 illustrative purposes. stable estimates, recommended run Gibbs sampler least 1e5 iterations. burnin number iterations Gibbs sampler saving output. Since may take time Gibbs sampler converge posterior distribution, recommended set number low. interaction_scale scale Cauchy distribution used prior pairwise interaction parameters. Defaults 2.5. threshold_alpha, threshold_beta shape parameters beta-prime prior density threshold parameters. Must positive values. two values equal, prior density symmetric zero. threshold_beta greater threshold_alpha, distribution skewed left, threshold_beta less threshold_alpha, skewed right. Smaller values tend lead diffuse prior distributions. edge_selection function perform Bayesian edge selection edges MRF addition estimating parameters (edge_selection = TRUE), just estimate parameters (edge_selection = FALSE)? default edge_selection = TRUE. edge_prior inclusion exclusion individual edges network modeled binary indicator variables capture structure network. argument edge_prior used set prior distribution edge indicator variables, .e., structure network. Currently, two options implemented: Bernoulli model edge_prior = \"Bernoulli\" assumes probability edge two variables included equal inclusion_probability independent edges variables. inclusion_probability = 0.5, means possible network structure given prior weight. Beta-Bernoulli model edge_prior = \"Beta-Bernoulli\" assumes beta prior unknown inclusion probability shape parameters beta_bernoulli_alpha beta_bernoulli_beta. beta_bernoulli_alpha = 1 beta_bernoulli_beta = 1, means networks complexity (number edges) get prior weight. default edge_prior = \"Bernoulli\". inclusion_probability prior edge inclusion probability Bernoulli model. Can single probability, matrix p rows p columns specifying inclusion probability edge pair. default inclusion_probability = 0.5. beta_bernoulli_alpha, beta_bernoulli_beta two shape parameters Beta prior density Bernoulli inclusion probability. Must positive numbers. Defaults beta_bernoulli_alpha = 1 beta_bernoulli_beta = 1. na.action want function handle missing data? na.action = \"listwise\", listwise deletion used. na.action = \"impute\", missing data imputed iteratively MCMC procedure. Since imputation missing data can negative impact convergence speed MCMC procedure, recommended run MCMC iterations. Also, since numerical routines search mode posterior imputation option, bgm function automatically switch interaction_prior = \"Cauchy\" adaptive = TRUE. save function collect return samples Gibbs sampler (save = TRUE)? return (model-averaged) posterior means (save = FALSE)? Defaults FALSE. display_progress function show progress bar (display_progress = TRUE)? (display_progress = FALSE)? default TRUE.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","text":"save = FALSE (default), result list class “bgms” containing following matrices: gamma: matrix p rows p columns, containing posterior inclusion probabilities individual edges. interactions: matrix p rows p columns, containing model-averaged posterior means pairwise associations. thresholds: matrix p rows max(m) columns, containing model-averaged category thresholds. case “blume-capel” variables, first entry parameter linear effect second entry parameter quadratic effect, models offset reference category. save = TRUE, result list class “bgms” containing: gamma: matrix iter rows p * (p - 1) / 2 columns, containing edge inclusion indicators every iteration Gibbs sampler. interactions: matrix iter rows p * (p - 1) / 2 columns, containing parameter states every iteration Gibbs sampler pairwise associations. thresholds: matrix iter rows sum(m) columns, containing parameter states every iteration Gibbs sampler category thresholds. Column averages matrices provide model-averaged posterior means. addition analysis results, bgm output lists arguments call. useful post-processing results.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","text":"Currently, bgm supports two types ordinal variables. regular, default, ordinal variable type restrictions distribution. Every response category except first receives threshold parameter. Blume-Capel ordinal variable assumes specific reference category, “neutral” Likert scale, responses scored terms distance reference category. Specifically, Blume-Capel model specifies following quadratic model threshold parameters: $$\\mu_{\\text{c}} = \\alpha \\times \\text{c} + \\beta \\times (\\text{c} - \\text{r})^2,$$ \\(\\mu_{\\text{c}}\\) threshold category c. parameter \\(\\alpha\\) models linear trend across categories, \\(\\alpha > 0\\) leads increasing number observations higher response categories \\(\\alpha <0\\) leads decreasing number observations higher response categories. parameter \\(\\beta\\) models response style terms offset respect reference category \\(r\\); \\(\\beta<0\\) preference respond reference category (.e., model introduces penalty responding category away reference_category category r), \\(\\beta > 0\\) preference score extreme categories away reference_category category. Bayesian estimation procedure (edge_selection = FALSE) simply estimates threshold pairwise interaction parameters ordinal MRF, Bayesian edge selection procedure (edge_selection = TRUE) also models probability individual edges included excluded model. Bayesian edge selection imposes discrete spike slab prior distribution pairwise interactions. formulating mixture mutually singular distributions, function can use combination Metropolis-Hastings Gibbs sampling create Markov chain joint posterior distribution invariant. current option slab distribution Cauchy optional scaling parameter. slab distribution also used prior interaction parameters Bayesian estimation. beta-prime distribution used exponent category parameters. Bayesian edge selection, two prior distributions implemented edge inclusion variables (.e., prior probability edge included); Bernoulli prior Beta-Bernoulli prior.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","text":"","code":"# \\donttest{  #Store user par() settings  op <- par(no.readonly = TRUE)   ##Analyse the Wenchuan dataset   # Here, we use 1e4 iterations, for an actual analysis please use at least  # 1e5 iterations.  fit = bgm(x = Wenchuan) #> Warning: There were 18 rows with missing observations in the input matrix x. #> Since na.action = listwise these rows were excluded from the analysis.    #------------------------------------------------------------------------------|  # INCLUSION - EDGE WEIGHT PLOT  #------------------------------------------------------------------------------|   par(mar = c(6, 5, 1, 1))  plot(x = fit$interactions[lower.tri(fit$interactions)],       y = fit$gamma[lower.tri(fit$gamma)], ylim = c(0, 1),       xlab = \"\", ylab = \"\", axes = FALSE, pch = 21, bg = \"gray\", cex = 1.3)  abline(h = 0, lty = 2, col = \"gray\")  abline(h = 1, lty = 2, col = \"gray\")  abline(h = .5, lty = 2, col = \"gray\")  mtext(\"Posterior Mode Edge Weight\", side = 1, line = 3, cex = 1.7)  mtext(\"Posterior Inclusion Probability\", side = 2, line = 3, cex = 1.7)  axis(1)  axis(2, las = 1)     #------------------------------------------------------------------------------|  # EVIDENCE - EDGE WEIGHT PLOT  #------------------------------------------------------------------------------|   #For the default choice of the structure prior, the prior odds equal one:  prior.odds = 1  posterior.inclusion = fit$gamma[lower.tri(fit$gamma)]  posterior.odds = posterior.inclusion / (1 - posterior.inclusion)  log.bayesfactor = log(posterior.odds / prior.odds)  log.bayesfactor[log.bayesfactor > 5] = 5   par(mar = c(5, 5, 1, 1) + 0.1)  plot(fit$interactions[lower.tri(fit$interactions)], log.bayesfactor, pch = 21, bg = \"#bfbfbf\",       cex = 1.3, axes = FALSE, xlab = \"\", ylab = \"\", ylim = c(-5, 5.5),       xlim = c(-0.5, 1.5))  axis(1)  axis(2, las = 1)  abline(h = log(1/10), lwd = 2, col = \"#bfbfbf\")  abline(h = log(10), lwd = 2, col = \"#bfbfbf\")   text(x = 1, y = log(1 / 10), labels = \"Evidence for Exclusion\", pos = 1,       cex = 1.7)  text(x = 1, y = log(10), labels = \"Evidence for Inclusion\", pos = 3, cex = 1.7)  text(x = 1, y = 0, labels = \"Absence of Evidence\", cex = 1.7)  mtext(\"Log-Inclusion Bayes Factor\", side = 2, line = 3, cex = 1.5, las = 0)  mtext(\"Posterior Mean Interactions \", side = 1, line = 3.7, cex = 1.5, las = 0)     #------------------------------------------------------------------------------|  # THE MEDIAN PROBABILITY NETWORK  #------------------------------------------------------------------------------|   tmp = fit$interactions[lower.tri(fit$interactions)]  tmp[posterior.inclusion < 0.5] = 0   median.prob.model = matrix(0, nrow = ncol(Wenchuan), ncol = ncol(Wenchuan))  median.prob.model[lower.tri(median.prob.model)] = tmp  median.prob.model = median.prob.model + t(median.prob.model)   rownames(median.prob.model) = colnames(Wenchuan)  colnames(median.prob.model) = colnames(Wenchuan)   library(qgraph)  qgraph(median.prob.model,         theme = \"TeamFortress\",         maximum = .5,         fade = FALSE,         color = c(\"#f0ae0e\"), vsize = 10, repulsion = .9,         label.cex = 1.1, label.scale = \"FALSE\",         labels = colnames(Wenchuan))    #Restore user par() settings  par(op) # }"},{"path":"https://maartenMarsman.github.io/bgms/reference/bgmCompare.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian variable selection or Bayesian estimation for differences in the Markov random field model for binary and/or ordinal variables in two independent samples. — bgmCompare","title":"Bayesian variable selection or Bayesian estimation for differences in the Markov random field model for binary and/or ordinal variables in two independent samples. — bgmCompare","text":"bgmCompare function estimates pseudoposterior distribution parameters Markov Random Field model mixed binary ordinal variables, differences pairwise interactions category thresholds two groups. groups assumed two independent samples.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgmCompare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian variable selection or Bayesian estimation for differences in the Markov random field model for binary and/or ordinal variables in two independent samples. — bgmCompare","text":"","code":"bgmCompare(   x,   y,   difference_selection = TRUE,   main_difference_model = c(\"Collapse\", \"Constrain\", \"Free\"),   variable_type = \"ordinal\",   reference_category,   pairwise_difference_scale = 1,   main_difference_scale = 0.1,   pairwise_difference_prior = c(\"Bernoulli\", \"Beta-Bernoulli\"),   main_difference_prior = c(\"Bernoulli\", \"Beta-Bernoulli\"),   pairwise_difference_probability = 0.5,   main_difference_probability = 0.5,   pairwise_beta_bernoulli_alpha = 1,   pairwise_beta_bernoulli_beta = 1,   main_beta_bernoulli_alpha = 1,   main_beta_bernoulli_beta = 1,   interaction_scale = 2.5,   threshold_alpha = 0.5,   threshold_beta = 0.5,   iter = 10000,   burnin = 1000,   na.action = c(\"listwise\", \"impute\"),   save = FALSE,   display_progress = TRUE )"},{"path":"https://maartenMarsman.github.io/bgms/reference/bgmCompare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian variable selection or Bayesian estimation for differences in the Markov random field model for binary and/or ordinal variables in two independent samples. — bgmCompare","text":"x data frame matrix \\(n_1\\) rows p columns containing binary ordinal responses first group. Regular ordinal variables recoded non-negative integers (0, 1, ..., m) already done. Unobserved categories collapsed categories recoding (.e., category 1 unobserved, data recoded (0, 2) (0, 1)). Blume-Capel ordinal variables also coded non-negative integers already done. However, since “distance” reference category plays important role model, unobserved categories collapsed recoding. y data frame matrix \\(n_2\\) rows p columns containing binary ordinal responses second group. variables columns y must match variables columns x. paired samples design, rows x must match rows y. Note x y recoded independently, although function checks number different responses observed matches x y. difference_selection Logical. TRUE, bgmCompare model inclusion exclusion samples parameter differences; FALSE, estimate -sample parameter differences. Default TRUE. variable_type string vector specifying type variables x (y). Supported types \"ordinal\" \"blume-capel\", binary variables treated \"ordinal\". Default \"ordinal\". reference_category reference category Blume-Capel model. integer within range integer values observed \"blume-capel\" variable. Can single number sets reference category Blume-Capel variables , vector length p, -th element reference category variable Blume-Capel variable, elements variable types ignored. value reference category also recoded `bgmCompare` recodes corresponding observations. Required least one variable type \"blume-capel\". pairwise_difference_scale scale Cauchy distribution used prior pairwise difference parameters. Defaults 0.1. main_difference_scale scale Cauchy distribution used prior threshold difference parameters. Defaults 0.1. pairwise_difference_prior character string specifies model use  inclusion probability pairwise differences. Options \"Bernoulli\" \"Beta-Bernoulli\". Default \"Bernoulli\". main_difference_prior character string specifies model use  inclusion probability threshold differences. Options \"Bernoulli\" \"Beta-Bernoulli\". Default \"Bernoulli\". pairwise_difference_probability inclusion probability pairwise difference Bernoulli model. Can single probability matrix p rows p columns specifying probability difference edge pair. Defaults 0.5. main_difference_probability inclusion probability threshold difference Bernoulli model. Defaults 0.5, implying prior preference. Can single probability vector length p specifying probability difference category thresholds variable. Defaults 0.5. pairwise_beta_bernoulli_alpha alpha parameter beta distribution Beta-Bernoulli model group differences pairwise interactions. Default 1. pairwise_beta_bernoulli_beta beta parameter beta distribution Beta-Bernoulli model group differences pairwise interactions. Default 1. main_beta_bernoulli_alpha alpha parameter beta distribution Beta-Bernoulli model group differences category thresholds. Default 1. main_beta_bernoulli_beta beta parameter beta distribution Beta-Bernoulli model group differences category thresholds. Default 1. interaction_scale scale Cauchy distribution used prior nuisance pairwise interaction parameters. Defaults 2.5. threshold_alpha, threshold_beta shape parameters beta-prime prior density nuisance threshold parameters. Must positive values. two values equal, prior density symmetric zero. threshold_beta greater threshold_alpha, distribution left-skewed, threshold_beta less threshold_alpha, right-skewed. Smaller values tend result diffuse prior distributions. iter function uses Gibbs sampler sample posterior distribution model parameters indicator variables. many iterations Gibbs sampler run? default 1e4 illustrative purposes. stable estimates, recommended run Gibbs sampler least 1e5 iterations. burnin number iterations Gibbs sampler saving output. Since may take time Gibbs sampler converge posterior distribution, recommended set number low. na.action want function handle missing data? na.action = \"listwise\", listwise deletion used. na.action = \"impute\", missing data imputed iteratively Gibbs sampling. Since imputation missing data can negative impact convergence speed Gibbs sampling procedure, recommended run procedure iterations. save function collect return samples Gibbs sampler (save = TRUE)? return (model-averaged) posterior means (save = FALSE)? Defaults FALSE. display_progress function show progress bar (display_progress = TRUE)? (display_progress = FALSE)? default TRUE.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgmCompare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian variable selection or Bayesian estimation for differences in the Markov random field model for binary and/or ordinal variables in two independent samples. — bgmCompare","text":"save = FALSE (default), result list class “bgmCompare” containing following matrices: indicator: matrix p rows p    columns containing posterior inclusion probabilities differences    pairwise interactions -diagonal posterior inclusion    probabilities differences category thresholds diagonal. difference_pairwise: matrix p rows p    columns, containing model-averaged posterior means differences    pairwise interactions. difference_threshold: matrix p rows    max(m) columns, containing model-averaged posterior means    differences category thresholds. interactions: matrix p rows p columns,    containing posterior means nuisance pairwise interactions. thresholds: matrix p rows max(m)    columns containing posterior means nuisance category thresholds.    case “blume-capel” variables, first entry parameter    linear effect second entry parameter    quadratic effect, models offset reference category. save = TRUE, result list class “bgmCompare” containing following matrices: indicator_pairwise: matrix iter rows    p * (p - 1) / 2 columns containing inclusion indicators    differences pairwise interactions iteration Gibbs    sampler. difference_pairwise: matrix iter rows    p * (p - 1) / 2 columns, containing parameter states    differences pairwise interactions iteration Gibbs    sampler. indicator_threshold: matrix iter rows    sum(m) columns, containing inclusion indicators    differences category thresholds iteration Gibbs    sampler. difference_threshold: matrix iter rows    sum(m) columns, containing parameter states differences    category thresholds iteration Gibbs sampler. interactions: matrix iter rows    p * (p - 1) / 2 columns, containing parameter states    nuisance pairwise interactions iteration Gibbs sampler. thresholds: matrix iter rows sum(m)    columns, containing parameter states nuisance category thresholds    iteration Gibbs sampler. Column averages matrices provide model-averaged posterior means. addition results analysis, output lists arguments call. useful post-processing results.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgmCompare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian variable selection or Bayesian estimation for differences in the Markov random field model for binary and/or ordinal variables in two independent samples. — bgmCompare","text":"first group, pairwise interactions variables \\(\\) \\(j\\) modeled $$\\sigma_{\\text{ij}} = \\theta_{\\text{ij}} + \\delta_{\\text{ij}} / 2,$$ second group $$\\sigma_{\\text{ij}} = \\theta_{\\text{ij}} - \\delta_{\\text{ij}} / 2,$$ pairwise interaction parameter \\(\\theta_{\\text{ij}}\\) denotes overall effect considered nuisance, attention focused pairwise difference parameter \\(\\delta_{\\text{ij}}\\), reflects difference pairwise interaction two groups. bgmCompare function supports two types ordinal variables, can mixed. default ordinal variable introduces threshold parameter category except lowest category. variable type, threshold parameter variable \\(\\), category \\(c\\), modeled $$\\mu_{\\text{ic}} = \\tau_{\\text{ic}} + \\epsilon_{\\text{ic}} / 2,$$ first group second group $$\\mu_{\\text{ic}} = \\tau_{\\text{ic}} - \\epsilon_{\\text{ic}} / 2,$$ category threshold parameter \\(\\tau_{\\text{ic}}\\) denotes overall effect considered nuisance, attention focused threshold difference parameter \\(\\epsilon_{\\text{ic}}\\), reflects difference threshold variable \\(\\), category \\(c\\) two groups. Blume-Capel ordinal variable assumes specific reference category, “neutral” Likert scale, responses scored according distance reference category. first group, threshold parameters modelled $$\\mu_{\\text{ic}} = (\\tau_{\\text{i1}} + \\epsilon_{\\text{i1}} / 2) \\times \\text{c} + (\\tau_{\\text{i2}} + \\epsilon_{\\text{i2}} / 2) \\times (\\text{c} - \\text{r})^2,$$ second groups $$\\mu_{\\text{ic}} = (\\tau_{\\text{i1}} - \\epsilon_{\\text{i1}} / 2) \\times \\text{c} + (\\tau_{\\text{i2}} - \\epsilon_{\\text{i2}} / 2) \\times (\\text{c} - \\text{r})^2.$$ linear quadratic category threshold parameters \\(\\tau_{\\text{i1}}\\) \\(\\tau_{\\text{i2}}\\) denote overall effects considered nuisance, attention focused two threshold difference parameters \\(\\epsilon_{\\text{i1}}\\) \\(\\epsilon_{\\text{i2}}\\), reflect differences quadratic model variable \\(\\) two groups. Bayesian variable selection used model presence absence difference parameters \\(\\delta\\) \\(\\epsilon\\), allow us assess parameter differences two groups. Independent spike slab priors specified difference parameters. spike slab priors use binary indicator variables select difference parameters, assigning diffuse Cauchy prior optional scaling parameter selected, setting difference parameter zero selected. function offers two models probabilistic inclusion parameter differences: Bernoulli Model: model assigns fixed probability   selecting parameter difference, treating independent events.   probability 0.5 indicates preference, giving equal prior weight   configurations. Beta-Bernoulli Model: Introduces beta distribution prior   inclusion probability models complexity configuration   difference indicators. alpha beta shape parameters   beta distribution set 1, model assigns prior weight   number differences present (.e., configuration two differences   four differences priori equally likely). Inclusion probabilities can specified pairwise interactions   pairwise_difference_probability category thresholds   threshold_difference_probability. pairwise interaction parameters \\(\\theta\\), category threshold parameters \\(\\tau\\), , yet implemented paired-samples designs, -sample interactions \\(\\omega\\) considered nuisance parameters common models. pairwise interaction parameters \\(\\theta\\) -sample interactions \\(\\omega\\) assigned diffuse Cauchy prior optional scaling parameter. exponent category threshold parameters \\(\\tau\\) assigned beta-prime distribution optional scale values.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgms-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bgms: Bayesian Analysis of Networks of Binary and/or Ordinal Variables — bgms-package","title":"bgms: Bayesian Analysis of Networks of Binary and/or Ordinal Variables — bgms-package","text":"R package bgms provides tools Bayesian analysis graphical models describing networks variables. package uses Markov chain Monte Carlo methods combined pseudolikelihood approach estimate posterior distribution model parameters. Gibbs variable selection GeorgeMcCulloch_1993bgms used model underlying network structure graphical model. imposing discrete spike slab prior pairwise interactions, possible shrink interactions exactly zero. Gibbs sampler embeds Metropolis approach mixtures mutually singular distributions GottardoRaftery_2008bgms account discontinuity zero. goal provide tools Markov Random Field (MRF) models wide range variable types bgms package, currently provides analyzing networks binary /ordinal variables MarsmanHaslbeck_2023_OrdinalMRFbgms. goal provide tools Markov Random Field (MRF) models wide range variable types bgms package, currently provides tools analyzing networks binary /ordinal variables MarsmanHaslbeck_2023_OrdinalMRFbgms. MRFs special class graphical models whose graph structure reflects conditional associations variables, making useful testing conditional independence dependence. example, inclusion Bayes factor tests conditional independence dependence pair variables network comparing predictive adequacy models include edge variables models exclude edge. HuthEtAl_2023_intro,SekulovskiEtAl_2023bgms. bgms package offers several tools analyzing structure MRF: Simulate response data MRF using Gibbs sampler. Simulate mrfSampler. Estimate posterior distribution MRF's parameters  possibly network structure using Gibbs variable selection. Bayesian estimation Bayesian edge selection bgm.","code":""},{"path":[]},{"path":[]},{"path":"https://maartenMarsman.github.io/bgms/reference/bgms-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bgms: Bayesian Analysis of Networks of Binary and/or Ordinal Variables — bgms-package","text":"Maintainer: Maarten Marsman m.marsman@uva.nl (ORCID) contributors: Karoline Huth (ORCID) [contributor] Nikola Sekulovski (ORCID) [contributor] Don van den Bergh (ORCID) [contributor]","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/extractor_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extractor Functions. — extract_arguments","title":"Extractor Functions. — extract_arguments","text":"Extractor Functions.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/extractor_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extractor Functions. — extract_arguments","text":"","code":"extract_arguments(bgms_object)  extract_edge_indicators(bgms_object)  extract_posterior_inclusion_probabilities(bgms_object)  extract_edge_priors(bgms_object)  extract_pairwise_thresholds(bgms_object)"},{"path":"https://maartenMarsman.github.io/bgms/reference/extractor_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extractor Functions. — extract_arguments","text":"bgms_object fit object created bgms package specifically bgm function.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/extractor_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extractor Functions. — extract_arguments","text":"Extract results bgm objects safe way. Mainly intended developers packages build top bgms package.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/mrfSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample states of the ordinal MRF — mrfSampler","title":"Sample states of the ordinal MRF — mrfSampler","text":"function samples states ordinal MRF using Gibbs sampler. Gibbs sampler initiated random values response options, proceeds simulating states variable logistic model using variable states predictor variables.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/mrfSampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample states of the ordinal MRF — mrfSampler","text":"","code":"mrfSampler(   no_states,   no_variables,   no_categories,   interactions,   thresholds,   variable_type = \"ordinal\",   reference_category,   iter = 1000 )"},{"path":"https://maartenMarsman.github.io/bgms/reference/mrfSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample states of the ordinal MRF — mrfSampler","text":"no_states number states ordinal MRF generated. no_variables number variables ordinal MRF. no_categories Either positive integer vector positive integers length no_variables. number response categories top base category: no_categories = 1 generates binary states. interactions symmetric no_variables no_variables matrix pairwise interactions. -diagonal elements used. thresholds no_variables max(no_categories) matrix category thresholds. elements row indicate thresholds variable . no_categories vector, first no_categories[] elements used row . Blume-Capel model used category thresholds variable , row requires two values (details ); first \\(\\alpha\\), linear contribution Blume-Capel model second \\(\\beta\\), quadratic contribution. variable_type kind variables simulated? Can single character string specifying variable type p variables vector character strings length p specifying type variable separately. Currently, bgm supports “ordinal” “blume-capel”. Binary variables automatically treated “ordinal’’. Defaults variable_type = \"ordinal\". reference_category integer vector length no_variables specifying reference_category category used Blume-Capel model (details ). Can integer value 0 no_categories (no_categories[]). iter number iterations used Gibbs sampler. function provides last state Gibbs sampler output. default set 1e3.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/mrfSampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample states of the ordinal MRF — mrfSampler","text":"no_states no_variables matrix simulated states ordinal MRF.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/mrfSampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample states of the ordinal MRF — mrfSampler","text":"two modeling options category thresholds. default option assumes category thresholds free, except first threshold set zero identification. user needs specify thresholds remaining response categories. option useful type ordinal variable gives user freedom specifying model. Blume-Capel option specifically designed ordinal variables special type reference_category category, neutral category Likert scale. Blume-Capel model specifies following quadratic model threshold parameters: $$\\mu_{\\text{c}} = \\alpha \\times \\text{c} + \\beta \\times (\\text{c} - \\text{r})^2,$$ \\(\\mu_{\\text{c}}\\) threshold category c (now includes zero), \\(\\alpha\\) offers linear trend across categories (increasing threshold values \\(\\alpha > 0\\) decreasing threshold values \\(\\alpha <0\\)), \\(\\beta < 0\\), offers increasing penalty responding category away reference_category category r, \\(\\beta > 0\\) suggests preference responding reference_category category.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/mrfSampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample states of the ordinal MRF — mrfSampler","text":"","code":"# Generate responses from a network of five binary and ordinal variables. no_variables = 5 no_categories = sample(1:5, size = no_variables, replace = TRUE)  Interactions = matrix(0, nrow = no_variables, ncol = no_variables) Interactions[2, 1] = Interactions[4, 1] = Interactions[3, 2] =   Interactions[5, 2] = Interactions[5, 4] = .25 Interactions = Interactions + t(Interactions) Thresholds = matrix(0, nrow = no_variables, ncol = max(no_categories))  x = mrfSampler(no_states = 1e3,                no_variables = no_variables,                no_categories = no_categories,                interactions = Interactions,                thresholds = Thresholds) #> Warning: The matrix ``thresholds'' contains numeric values for variable 1 for category  #> (categories, i.e., columns) exceding the maximum of 1. These values will  #> be ignored. #> Warning: The matrix ``thresholds'' contains numeric values for variable 2 for category  #> (categories, i.e., columns) exceding the maximum of 1. These values will  #> be ignored. #> Warning: The matrix ``thresholds'' contains numeric values for variable 4 for category  #> (categories, i.e., columns) exceding the maximum of 1. These values will  #> be ignored. #> Warning: The matrix ``thresholds'' contains numeric values for variable 5 for category  #> (categories, i.e., columns) exceding the maximum of 1. These values will  #> be ignored.  # Generate responses from a network of 2 ordinal and 3 Blume-Capel variables. no_variables = 5 no_categories = 4  Interactions = matrix(0, nrow = no_variables, ncol = no_variables) Interactions[2, 1] = Interactions[4, 1] = Interactions[3, 2] =   Interactions[5, 2] = Interactions[5, 4] = .25 Interactions = Interactions + t(Interactions)  Thresholds = matrix(NA, no_variables, no_categories) Thresholds[, 1] = -1 Thresholds[, 2] = -1 Thresholds[3, ] = sort(-abs(rnorm(4)), decreasing = TRUE) Thresholds[5, ] = sort(-abs(rnorm(4)), decreasing = TRUE)  x = mrfSampler(no_states = 1e3,                no_variables = no_variables,                no_categories = no_categories,                interactions = Interactions,                thresholds = Thresholds,                variable_type = c(\"b\",\"b\",\"o\",\"b\",\"o\"),                reference_category = 2)"},{"path":"https://maartenMarsman.github.io/bgms/reference/print.bgms.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for bgms objects — print.bgms","title":"Print method for bgms objects — print.bgms","text":"Used prevent bgms output cluttering console.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/print.bgms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for bgms objects — print.bgms","text":"","code":"# S3 method for class 'bgms' print(x, ...)"},{"path":"https://maartenMarsman.github.io/bgms/reference/print.bgms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for bgms objects — print.bgms","text":"x object class bgms. ... Ignored.","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"bgms-014","dir":"Changelog","previous_headings":"","what":"bgms 0.1.4","title":"bgms 0.1.4","text":"Added bgmCompare() comparing category threshold pairwise interaction parameters two independent samples. Exported extractor functions extract results bgm objects safe way. small bug fixes.","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"bgms-013","dir":"Changelog","previous_headings":"","what":"bgms 0.1.3","title":"bgms 0.1.3","text":"CRAN release: 2024-02-25 Added support Bayesian estimation without edge selection bgm(). Added support simulating data (mixed) binary, ordinal, Blume-Capel MRF mrfSampler() Added support analyzing (mixed) binary, ordinal, Blume-Capel variables bgm() Removed support optimization based functions, mple(), mppe(), bgm.em() Removed support Unit-Information prior bgm() Removed support non-adaptive Metropolis bgm() Reduced file size saving raw MCMC samples","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"bgms-012","dir":"Changelog","previous_headings":"","what":"bgms 0.1.2","title":"bgms 0.1.2","text":"CRAN release: 2023-10-13 minor release adds bug fixes.","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"bgms-011","dir":"Changelog","previous_headings":"","what":"bgms 0.1.1","title":"bgms 0.1.1","text":"CRAN release: 2023-09-01 minor release adding new features fixing minor bugs.","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"bgms 0.1.1","text":"Missing data imputation bgm function. See na.action option. Prior distributions network structure bgm function. See edge_prior option. Adaptive Metropolis alternative current random walk Metropolis algorithm bgm function. See adaptive option.","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"user-level-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"User level changes","title":"bgms 0.1.1","text":"Changed default specification interaction prior UnitInfo Cauchy. See interaction_prior option. Changed default threshold hyperparameter specification 1.0 0.5. See threshold_alpha threshold_beta options. Analysis output now uses column names data.","code":""}]
